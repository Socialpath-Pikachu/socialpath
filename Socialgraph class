package Socialpath;

import java.util.ArrayList;

public class Socialgraph{

    Vertex head;
    int size; 

    public Socialgraph() {
        head = null;
        size = 0;
    }

    public void clear() {
        head = null;
    }

    //get number of vertices 
    public int getSize() {
        return this.size;
    }

    //get indeg of a vertex
    public int getIndeg(int v) {
        if (hasVertex(v) == true) {
            Vertex temp = head;
            while (temp != null) {
                if (temp.vertexInfo == v) {
                    return temp.indeg;
                }
                temp = temp.nextVertex;
            }
        }
        return -1;
    }

    //get outdeg of a vertex
    public int getOutdeg(int v) {
        if (hasVertex(v) == true) {
            Vertex temp = head;
            while (temp != null) {
                if (temp.vertexInfo == v) {
                    return temp.outdeg;
                }
                temp = temp.nextVertex;
            }
        }
        return -1;
    }

    //is this vertex in the graph?
    public boolean hasVertex(int v) {
        if (head == null) {
            return false;
        }
        Vertex temp = head;
        while (temp != null) {
            if (temp.vertexInfo == v) {
                return true;
            }
            temp = temp.nextVertex;
        }
        return false;
    }

    //add new vertex to graph
    public boolean addVertex(int v) {
        if (hasVertex(v) == false) { //the vertex is not in the graph
            Vertex temp = head;
            Vertex newVertex = new Vertex(v, null);
            if (head == null) {
                head = newVertex;
            } else {
                Vertex previous = head;
                while (temp != null) {
                    previous = temp;
                    temp = temp.nextVertex;
                }
                previous.nextVertex = newVertex;
            }
            size++;
            return true;
        } else //vertex alr exist 
        {
            return false;
        }
    }

    //find the index of the vertex
    public int getIndex(int v) {
        Vertex temp = head;
        int pos = 0;
        while (temp != null) {
            if (temp.vertexInfo == v) {
                return pos;
            }
            temp = temp.nextVertex;
            pos += 1;
        }
        return -1;
    }

    //return an ArrayList which stores all students nodes
    public ArrayList<Integer> getAllStudents() {
        ArrayList<Integer> list = new ArrayList<>();
        Vertex temp = head;
        while (temp != null) {
            list.add(temp.vertexInfo);
            temp = temp.nextVertex;
        }
        return list;
    }

    //return all vertices to an arraylist
    public ArrayList<Vertex> getAllVertices() {
        ArrayList<Vertex> list = new ArrayList<>();
        Vertex temp = head;
        while (temp != null) {
            list.add(temp);
            temp = temp.nextVertex;
        }
        return list;
    }
    
    //get student node at specific index and return as String
    public int getStudentVertex(int pos) {
        if (pos > size - 1 || pos < 0) {
            return -1;
        }
        Vertex temp = head;
        for (int i = 0; i < pos; i++) {
            temp = temp.nextVertex;
        }
        return temp.vertexInfo;
    }

    //add a new edge from source to destination with a rep point
    //only source have a rep point while destination doesn't
    public boolean addDirectedEdge(int source, int destination, double srcRep) { //1 -> 3 | 1's rep : 10
        if (head == null) {
            return false;
        }
        if (!hasVertex(source) || !hasVertex(destination)) {
            return false;
        }
        Vertex sourceVertex = head;
        while (sourceVertex != null) {
            if (sourceVertex.vertexInfo == source) {
                Vertex destinationVertex = head;
                while (destinationVertex != null) {
                    if (destinationVertex.vertexInfo == destination) {
                        Edge newEdge = new Edge(destinationVertex, srcRep, sourceVertex.firstEdge);
                        sourceVertex.firstEdge = newEdge;
                        sourceVertex.outdeg++;
                        destinationVertex.indeg++;
                        sourceVertex.rep = srcRep;
                        return true;
                    }
                    destinationVertex = destinationVertex.nextVertex;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return false;
    }

    //add undirected edge with rep point
    //srcName -> destName , srcName's rep point = srcRep
    //destName -> srcName , destName's rep point = destRep
    public boolean addUndirectedEdge(int srcName, int destName, double srcRep, double destRep){ //1,7,3,4
        if(head == null){
            return false;
        }
        if(!hasVertex(srcName) || !hasVertex(destName)){
            return false;
        }
        Vertex sourceVertex = head;
        while (sourceVertex != null) {
            if (sourceVertex.vertexInfo == srcName) {
                Vertex destinationVertex = head;
                while (destinationVertex != null) {
                    if (destinationVertex.vertexInfo == destName) {
                        Edge newSrcEdge = new Edge(destinationVertex, srcRep, sourceVertex.firstEdge);
                        Edge newDestEdge = new Edge(sourceVertex, destRep, destinationVertex.firstEdge);
                        sourceVertex.firstEdge = newSrcEdge; 
                        destinationVertex.firstEdge = newDestEdge;
                        sourceVertex.outdeg++;
                        sourceVertex.indeg++;
                        destinationVertex.indeg++;
                        destinationVertex.outdeg++; 
                        sourceVertex.rep = srcRep; 
                        destinationVertex.rep = destRep;
                        return true;
                    }
                    destinationVertex = destinationVertex.nextVertex;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return false;
    }
    
    public boolean addUndirectedEdge(int source, int destination){
        if (head == null) {
            return false;
        }
        if (!hasVertex(source) || !hasVertex(destination)) {
            return false;
        }
        Vertex sourceVertex = head;
        while (sourceVertex != null) {
            if (sourceVertex.vertexInfo == source) {
                // Reached source vertex, look for destination now
                Vertex destinationVertex = head;
                while (destinationVertex != null) {
                    if (destinationVertex.vertexInfo == destination) {
                        Edge newEdge = new Edge(destinationVertex, sourceVertex.firstEdge);
                        Edge newEdge2 = new Edge(sourceVertex, destinationVertex.firstEdge);
                        sourceVertex.firstEdge = newEdge;
                        destinationVertex.firstEdge = newEdge2;
                        sourceVertex.outdeg++;
                        sourceVertex.indeg++;
                        destinationVertex.indeg++;
                        destinationVertex.outdeg++;
                        return true;
                    }
                    destinationVertex = destinationVertex.nextVertex;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return false;
    }
    
    public boolean addUndirectedEdge(int source, int destination, double w){
        if (head == null) {
            return false;
        }
        if (!hasVertex(source) || !hasVertex(destination)) {
            return false;
        }
        Vertex sourceVertex = head;
        while (sourceVertex != null) {
            if (sourceVertex.vertexInfo == source) {
                Vertex destinationVertex = head;
                while (destinationVertex != null) {
                    if (destinationVertex.vertexInfo == destination) {
                        Edge newSrcEdge = new Edge(destinationVertex, w, sourceVertex.firstEdge);
                        Edge newDestEdge = new Edge(sourceVertex, w, destinationVertex.firstEdge);
                        sourceVertex.firstEdge = newSrcEdge; 
                        destinationVertex.firstEdge = newDestEdge;
                        sourceVertex.outdeg++;
                        sourceVertex.indeg++;
                        destinationVertex.indeg++;
                        destinationVertex.outdeg++;
                        return true;
                    }
                    destinationVertex = destinationVertex.nextVertex;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return false;
    }
    
    public boolean removeEdge(int source, int destination) {
        if (head == null) {
            return false;
        } else if (!hasVertex(source) || !hasVertex(destination)) {
            return false;
        } else {
            Vertex sourceVertex = head;
            while (sourceVertex != null) {
                if (sourceVertex.vertexInfo == source) {
                    Edge currentEdge = sourceVertex.firstEdge;
                    Edge previousEdge = sourceVertex.firstEdge;
                    while (currentEdge != null) {
                        if (currentEdge.toVertex.vertexInfo == destination) {
                            if (currentEdge == sourceVertex.firstEdge) {   
                                sourceVertex.firstEdge = currentEdge.nextEdge;
                            } else {  
                                previousEdge.nextEdge = currentEdge.nextEdge;
                            }
                            currentEdge.nextEdge = null;
                            currentEdge.toVertex = null;
                            return true;
                        }
                        previousEdge = currentEdge;
                        currentEdge = currentEdge.nextEdge;
                    }
                }
                sourceVertex = sourceVertex.nextVertex;
            }
        }
        return false;
    }
    
    //check whether there is a directed edge
    public boolean hasDirectedEdge(int source, int destination) {
        if (head == null) {
            return false;
        }
        if (!hasVertex(source) || !hasVertex(destination)) {
            return false;
        }
        Vertex sourceVertex = head;
        while (sourceVertex != null) {
            if (sourceVertex.vertexInfo == source) {
                Edge currentEdge = sourceVertex.firstEdge;
                while (currentEdge != null) {
                    if (currentEdge.toVertex.vertexInfo == destination) // destination vertex found 
                    {
                        return true;
                    }
                    currentEdge = currentEdge.nextEdge;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return false;
    }

    //retrieve the vertex rep points of an edge
    public double getVertexRep(int source, int destination) {
        if (head == null) {
            return -1;
        }
        if (!hasVertex(source) || !hasVertex(destination)) {
            return -1;
        }
        Vertex sourceVertex = head;
        while (sourceVertex != null) {
            if (sourceVertex.vertexInfo == source) {
                Edge currentEdge = sourceVertex.firstEdge;
                while (currentEdge != null) {
                    if (currentEdge.toVertex.vertexInfo == destination) // destination vertex found 
                    {
                        return currentEdge.fromVertexRep;
                    }
                    currentEdge = currentEdge.nextEdge;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return -1;
    }
    
    //add rep points to existing edge 
    public boolean addRepPoints(int source, int destination, double rep){
        if(head == null){
            return false;
        }
        if (!hasVertex(source) || !hasVertex(destination)) {
            return false;
        }
        Vertex sourceVertex = head;
        while(sourceVertex != null){
            if(sourceVertex.vertexInfo == source){
                Edge currentEdge = sourceVertex.firstEdge;
                while(currentEdge != null){
                    if(currentEdge.toVertex.vertexInfo == destination){
                        currentEdge.fromVertexRep = rep;
                        return true;
                    }
                    currentEdge = currentEdge.nextEdge;
                }
            }
            sourceVertex = sourceVertex.nextVertex;
        }
        return false;
    }

    //return all neighbours of a vertex to an arraylist
    public ArrayList<Integer> getNeighbours(int v) {
        if (!hasVertex(v)) {
            return null;
        }
        ArrayList<Integer> list = new ArrayList();
        Vertex temp = head;
        while (temp != null) {
            if (temp.vertexInfo == v) {
                Edge currentEdge = temp.firstEdge;
                while (currentEdge != null) {
                    list.add(currentEdge.toVertex.vertexInfo);
                    currentEdge = currentEdge.nextEdge;
                }
            }
            temp = temp.nextVertex;
        }
        return list;
    }
    
    //calculate the number of neighbours of a vertex
    public int getNumOfNeighbours(int v){
        if (!hasVertex(v)) {
            return -1;
        }
        ArrayList<Integer> list = new ArrayList();
        Vertex temp = head;
        while(temp != null){
            if(temp.vertexInfo == v){
                Edge currentEdge = temp.firstEdge;
                while (currentEdge != null) {
                    list.add(currentEdge.toVertex.vertexInfo);
                    currentEdge = currentEdge.nextEdge;
                }
            }
            temp = temp.nextVertex;
        }
        return list.size();
    }

    //print graph
    public void printEdges() {
        Vertex temp = head;
        while (temp != null) {
            System.out.print("# " + temp.vertexInfo + " --> ");
            Edge currentEdge = temp.firstEdge;
            while (currentEdge != null) {
                System.out.print("[" + currentEdge.toVertex.vertexInfo + "(rep:" + currentEdge.fromVertexRep + ")] ");
                currentEdge = currentEdge.nextEdge;
            }
            System.out.println();
            temp = temp.nextVertex;
        }
    }

    
    public void printEdgesWithoutRep(){
        Vertex temp = head;
        while(temp != null){
            System.out.print("# " + temp.vertexInfo + " --> ");
            Edge currentEdge = temp.firstEdge;
            while(currentEdge != null){
                System.out.print(currentEdge.toVertex.vertexInfo + " ");
                currentEdge = currentEdge.nextEdge;
            }
            System.out.println("");
            temp = temp.nextVertex;
        }
    }
}
