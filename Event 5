package Socialpath;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import org.jgrapht.alg.util.Pair;

public class Event5 {

    static Student[] students;
    static Scanner s = new Scanner(System.in);
    static StringBuilder sb = new StringBuilder();
    static ArrayList<Pair<Student, Integer>> possibleSpreader = new ArrayList<>();
    static boolean multipleDaysCase = false;

    static boolean[] vis = new boolean[10];
    static ArrayList<Integer> spreaderCluster = new ArrayList();
    static ArrayList<Integer> crushCluster = new ArrayList();

    //main method
    public static void main(String[] args) {

        //declare variable in main method
        ArrayList<Integer> rumorPropagatesPerDay = new ArrayList();
        boolean[] visited = new boolean[10];

        System.out.println("\n------------------------------------------------------------------------");
        System.out.println("Event 5 : Meet your crush\n");

        //create a graph
        addToGraph(10);
        System.out.println("");

        //ask user whether he/she wants to create new relationship
        System.out.println("Would you like to add new relationship? [yes / no]");
        if (s.next().equalsIgnoreCase("yes")) {
            System.out.println("How many new relationship would you like to create?");
            int input = s.nextInt();
            for (int i = input; i > 0; i--) {
                System.out.println("Please enter " + i + " rows of students [each row with 2 students] : ");
                int from = s.nextInt();
                int to = s.nextInt();
                makeNewConnection(from, to);
            }
        }

        //prompt user to key in spreader and crush
        System.out.println("Enter the spreader follow by your crush : ");
        int spreaderID = s.nextInt();
        int crushID = s.nextInt();
        System.out.println("");

        //set spreader and crush
        Student spreader = students[spreaderID - 1];
        Student myCrush = students[crushID - 1];

        System.out.println("Checking...\n");

        separateCluster(spreader);

        if (isConnected(spreader)) { //connected graph
            if (!first3Conditions(spreader, myCrush)) {
                DFS(spreader, myCrush, 0, visited);
                stopSpreader(possibleSpreader);
                System.out.println("");
                if (!multipleDaysCase) {
                    BFS(spreader, myCrush, visited, rumorPropagatesPerDay);
                } else {
                    multipleDaysRumorPropagation(spreader, possibleSpreader);
                }
            }
        } else { //disconnected graph
            //no connection between spreader and crush
            if (noConnection(spreaderCluster, crushCluster, spreader, myCrush)) {
                sb.append("My crush and the spreader have no connection")
                        .append("\nMy crush will never know the rumor");
                System.out.println(sb);
                System.out.println("\nThe total number of students will know the rumor are " + spreaderCluster.size());
            } else if (!first3Conditions(spreader, myCrush)) {
                DFS(spreader, myCrush, 0, visited);
                stopSpreader(possibleSpreader);
                System.out.println("");
            }
        }
        System.out.println("------------------------------------------------------------------------");
    }

    //add all nodes into students[]
    public static void addToGraph(int numberOfStudent) {
        students = new Student[numberOfStudent];
        for (int i = 0; i < numberOfStudent; i++) {
            students[i] = new Student(i + 1);
        }
        students[0].addEdge(students[1]); // 1 - 2
        students[0].addEdge(students[6]); // 1 - 7
        students[1].addEdge(students[2]); // 2 - 3
        students[1].addEdge(students[4]); // 2 - 5
        students[1].addEdge(students[5]); // 2 - 6
        students[3].addEdge(students[7]); // 4 - 8
        students[3].addEdge(students[9]); // 4 - 10
        students[8].addEdge(students[9]); // 9 - 10

        for (Student s : students) {
            System.out.println(s.toString());
        }
    }

    //method to create new connection
    public static void makeNewConnection(int spreaderID, int myCrushID) {
        System.out.println("");
        if (spreaderID != 0 && myCrushID != 0) {
            students[spreaderID - 1].addEdge(students[myCrushID - 1]);
        }
        for (Student student : students) {
            System.out.println(student.toString());
        }
        System.out.println("");
    }

    //method to separate spreader cluster and crush cluster for disconnected graph
    public static void separateCluster(Student spreader) {
        if (!isConnected(spreader)) {
            crushCluster.add(4);
            crushCluster.add(8);
            crushCluster.add(9);
            crushCluster.add(10);

            spreaderCluster.add(1);
            spreaderCluster.add(2);
            spreaderCluster.add(3);
            spreaderCluster.add(5);
            spreaderCluster.add(6);
            spreaderCluster.add(7);
        }
    }

    //method to check whether the graph is connected 
    public static boolean isConnected(Student spreader) {
        dfsConnected(spreader);

        for (Student student : students) {
            if (!vis[student.getPersonID() - 1]) { //found disconnected person
                return false;
            }
        }
        return true;
    }

    //dfs algorithm is used to check whether the graph is connected
    public static void dfsConnected(Student spreader) {
        vis[spreader.getPersonID() - 1] = true;

        for (Student student : spreader.friends) {
            if (!vis[student.getPersonID() - 1]) {
                dfsConnected(student);
            }
        }
    }

    //method to check for the basic three conditions
    public static boolean first3Conditions(Student spreader, Student myCrush) {
        int rumorPropagatesOnDay1 = spreader.friends.size();

        //if spreader is one of the friends of crush
        if (spreaderIsFriendOfCrush(spreader, myCrush)) {
            sb.append("The spreader is my crush's friend")
                    .append("\nMy crush will definitely know the rumor on day 1")
                    .append("\nFail to convinced the spreader(s) T^T");
            System.out.println(sb);
            System.out.println("\nThe rumor propagates at one jump on day 1 is " + rumorPropagatesOnDay1);
            return true;
        } //if spreader has only 1 friend
        else if (spreader.friends.size() == 1) {
            sb.append("The spreader has only one friend")
                    .append("\nI will have teatime with the spreader's friend ")
                    .append(spreader.friends.get(0).getPersonID())
                    .append(" to stop the rumor")
                    .append("\nHaving teatime...")
                    .append("\n\nCongratulations! You have convinced the spreader(s) successfully ^O^");
            System.out.println(sb);
            System.out.println("\nThe rumor propagates at one jump on day 1 is " + rumorPropagatesOnDay1);
            return true;
        } //if my crush has only 1 friend and the friend is not the spreader
        else if (myCrush.friends.size() == 1 && !myCrush.friends.get(0).equals(spreader)) {
            sb.append("My crush has only one friend and that friend is not the spreader")
                    .append("\nI will have teatime with my crush's friend ")
                    .append(myCrush.friends.get(0).getPersonID())
                    .append(" to stop the rumor")
                    .append("\nHaving teatime...")
                    .append("\n\nCongratulations! You have convinced the spreader(s) successfully ^O^");
            System.out.println(sb);
            System.out.println("\nThe rumor propagates at one jump on day 1 is " + rumorPropagatesOnDay1);
            return true;
        }

        return false;

    }

    //method to check whether the spreader and my crush are connected directly
    public static boolean spreaderIsFriendOfCrush(Student spreader, Student crush) {
        for (Student s : spreader.friends) {
            if (s.equals(crush)) {
                return true;
            }
        }
        return false;
    }

    //method to check all possible paths of spreading rumor
    public static void DFS(Student spreader, Student myCrush, int numberOfDays, boolean[] visited) {
        visited[spreader.getPersonID() - 1] = true;
        spreader.numberOfDaysToKnow = numberOfDays;

        if (spreaderIsFriendOfCrush(spreader, myCrush)) {
            spreader.numberOfDaysToKnow = numberOfDays;
            possibleSpreader.add(new Pair<>(spreader, spreader.numberOfDaysToKnow));
        }

        for (Student current : spreader.friends) { //6 -> 2 3
            if (!visited[current.getPersonID() - 1] && !current.equals(myCrush)) { //visited[5]=false && 6!=8
                numberOfDays++;
                DFS(current, myCrush, numberOfDays, visited);
                numberOfDays--;
                visited[current.getPersonID() - 1] = false; // to ensure I could have other possible paths to crush
            }
        }
    }

    //method to check if the person is able to stop the spreader
    public static void stopSpreader(List<Pair<Student, Integer>> list) {
        Student student = list.get(0).getFirst();
        int count = 0;

        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getFirst().equals(student)) {
                count++;
            }
        }

        // to check if only one person would tell my crush
        if (count == list.size()) {
            sb.append("There is only one student who will spread the rumor to my crush ")
                    .append("\nI will have teatime with ")
                    .append(student.getPersonID())
                    .append(" to stop the rumor")
                    .append("\nHaving teatime...")
                    .append("\n\nCongratulations! You have convinced the spreader(s) successfully ^O^");
            System.out.println(sb);
            return;
        }

        int maxDays = list.get(0).getSecond();
        for (int i = 1; i < list.size(); i++) {
            if (list.get(i).getSecond() > maxDays) {
                maxDays = list.get(i).getSecond();
            }
        }

        boolean[] heard = new boolean[11];
        int numberOfPeopleHeard = 0;
        for (int i = 0; i < list.size(); i++) {
            if (!heard[list.get(i).getFirst().getPersonID()]) {
                heard[list.get(i).getFirst().getPersonID()] = true;
                numberOfPeopleHeard++;
            }
        }

        if (numberOfPeopleHeard > maxDays) {   // list.size == number of friends my crush has
            sb.append("There are more than one person that will spread the rumor to my crush on the next day")
                    .append("\nFail to convinced the spreader(s) T^T");
            System.out.println(sb);
            System.out.print("Those people are ");
            for (int i = 0; i < list.size() - 1; i++) {
                System.out.print(list.get(i).getFirst().getPersonID() + ", ");
            }
            System.out.print(list.get(list.size() - 1).getFirst().getPersonID());
            System.out.println("");
        } else { //multiple days case
            sb.append("There are 2 persons which will spread the rumor to my crush on different days")
                    .append("\nI will have teatime with different persons on different days")
                    .append("\nHaving teatime...")
                    .append("\n\nCongratulations! You have convinced the spreader(s) successfully ^O^");
            System.out.println(sb);
            
            multipleDaysCase = true;
        }

    }

    //method to get rumor propagation at one jump per day using BFS algorithm
    public static void BFS(Student spreader, Student myCrush, boolean[] visited, List<Integer> propagatesPerDay) {
        Queue<Student> queue = new LinkedList<>(); //queue which stores all the visited students
        Queue<Student> bfs = new LinkedList<>(); //another queue to store visited person to check that visited person's friends

        int day = 1;
        int i = 0; //list index
        int count = 0;
        ArrayList<Integer> list = new ArrayList(); //list which stores the rumor propagates per day 
        //and also includes the previous level rumor propagates per day 

        queue.add(spreader);
        visited[spreader.getPersonID() - 1] = true;

        while (!queue.isEmpty()) {
            System.out.println("Day " + day);
            propagatesPerDay.add(queue.size());

            while (!queue.isEmpty()) {
                Student current = queue.poll();
                System.out.println(current + " "); //print the visited person with his friends
                bfs.add(current); //add spreader and his friends
                count += current.friends.size();
            }

            list.add(count);
            if (i > 0) { //starting from the next day...
                System.out.println("The rumor propagates at one jump is " + (list.get(i) - list.get(i - 1)));
            } else { //first day
                System.out.println("The rumor propagates at one jump is " + list.get(0));
            }
            i++;
            System.out.println("");
            count = 0; //reset count to 0

            while (!bfs.isEmpty()) {
                for (Student student : bfs.poll().friends) { //spreader's friends
                    if (student.equals(myCrush) && !multipleDaysCase) { //false
                        System.out.println("The rumor will spread to my crush " + myCrush.getPersonID()
                                + " on day " + day);
                        return;
                    }
                    if (!visited[student.getPersonID() - 1]) {
                        queue.add(student);
                        visited[student.getPersonID() - 1] = true;
                    }
                }
            }
            day++;
        }
    }

    //method to calculate rumor propagation for multiple days case 
    //***condition where the person need to convince different persons on different day
    public static void multipleDaysRumorPropagation(Student spreader, List<Pair<Student, Integer>> list) {
        int firstPerson = 0;
        ArrayList<Student> secondPersonFriend = new ArrayList<>();
        int secondPersonFriendsSize = 0;
        int secondPerson = 0;
        int dayToKnow = 0;

        if (multipleDaysCase) {
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getSecond() == 1) { //day 1
                    firstPerson = list.get(i).getFirst().getPersonID(); 
                }
                
                computeForDay2(spreader, firstPerson, secondPersonFriend);
                int day2RumorPropagation = secondDayRumorPropagation(secondPersonFriend, secondPersonFriendsSize);
                        
                if (list.get(i).getSecond() == 2) {
                    dayToKnow = 2;
                    secondPerson = list.get(i).getFirst().getPersonID();
                    print(spreader, firstPerson, secondPersonFriend, day2RumorPropagation, secondPerson, dayToKnow);
                    return;
                } else if (list.get(i).getSecond() > 2) {
                    dayToKnow = list.get(i).getSecond();
                    secondPerson = list.get(i).getFirst().getPersonID();
                    print(spreader, firstPerson, secondPersonFriend, day2RumorPropagation, secondPerson, dayToKnow);
                    return;
                }
            }
            
        }
    }
    
    //method to get friends lists for those students which will spread the rumor on the second day
    public static void computeForDay2(Student spreader, int firstPerson, ArrayList<Student> secondPersonFriend) {
        for (int i = 0; i < spreader.friends.size(); i++) {
            if (spreader.friends.get(i).getPersonID() != firstPerson && spreader.friends.get(i).friends.size() > 1) {
                if (!secondPersonFriend.contains(spreader.friends.get(i))) {
                    secondPersonFriend.add(spreader.friends.get(i)); 
                }
            }
        }
    }
    
    //method to calculate second day rumor propagation for multiple days cases
    public static int secondDayRumorPropagation(ArrayList<Student> secondPersonFriend, int secondPersonFriendsSize){
        for (int k = 0; k < secondPersonFriend.size(); k++) {
            secondPersonFriendsSize += (secondPersonFriend.get(k).friends.size() - 1); //exclude spreader himself
        }
        return secondPersonFriendsSize;
    }
    
    //method to print rumor propagation for multiple days cases
    public static void print(Student spreader, int firstPerson, ArrayList<Student> secondPersonFriend, int secondPersonFriendsSize, int secondPerson, int dayToKnow) {
        int rumor = spreader.friends.size();
        System.out.println("Day 1\n" + "[" + spreader + "]" + "\nThe rumor propagates at one jump is " + rumor);
        System.out.println("I convinced " + firstPerson + " on day 1");
        System.out.println("");

        System.out.println("Day 2\n" + secondPersonFriend + "\nThe rumor propagates at one jump is " + secondPersonFriendsSize);
        System.out.println("I convinced " + secondPerson + (dayToKnow == 2 ? " on day 2" : (" on day " + dayToKnow)));
    }

    //no connection between spreader and crush
    public static boolean noConnection(ArrayList<Integer> spreaderCluster, ArrayList<Integer> crushCluster, Student spreader, Student myCrush){
        return spreaderCluster.contains(spreader.getPersonID()) && crushCluster.contains(myCrush.getPersonID());
    }
}
