package Socialpath;

import java.util.ArrayList;
import java.util.Scanner;

public class Events {

    static double rep;
    
    public static void main(String[] args) {
        Socialgraph graph = addToGraph();
        graph.printEdges();
        event1("1","3",graph);
        event2("1","3",graph);
    }
    
    public static boolean event1 (String mentor, String mentee, Socialgraph graph){
        System.out.println("\n----------------------------------------------------");
        System.out.println("Event 1 : Teaching a stranger to solve lab qustions");
        boolean isFriendOf ;
        isFriendOf = graph.hasDirectedEdge(mentor, mentee) || graph.hasDirectedEdge(mentee, mentor); //check whether mentor & mentee are friends
        if(!isFriendOf){
            System.out.println("Mentor " + mentor + " is helping mentee " + mentee + " to solve lab questions");
            System.out.println("Teaching lab questions now...\n");
            
            try{
                Thread.sleep(2000);
            } catch(InterruptedException e){
                e.printStackTrace();
            }
            
            rep = (Math.random() > 0.5) ? 10 : 2;
            graph.addDirectedEdge(mentor, mentee, rep); 
            System.out.println("Mentor " + mentor + " programming skill is " + (rep == 10 ? "good" : "bad"));
            System.out.println("The learning experience is " + (rep == 10 ? "pleasant" : "unpleasant"));
            System.out.println(mentor + " rep points relative to " + mentee + " is " + rep);
            System.out.println("----------------------------------------------------\n");
            graph.printEdges();
            return true;
        }
        else{
            System.out.println("They are friends. Unable to teach a friend.");
            return false;
        }
    }
    
    public static boolean event2(String mentor, String mentee, Socialgraph graph){
        System.out.println("\n----------------------------------------------------");
        System.out.println("Event 2 : Chit-chat");
        System.out.println("Please decide who to chit-chat with mentee " + mentee + " : ");
        Scanner s = new Scanner(System.in);
        String person = s.next();
        System.out.println("");
        if (!person.equals(mentor) && !person.equals(mentee)) { 
            boolean isFriendOfMentee = graph.hasDirectedEdge(mentee, person) || graph.hasDirectedEdge(person, mentee);//mentee : 3 ; person : 2
            boolean isFriendOfMentor = graph.hasDirectedEdge(mentor, person) || graph.hasDirectedEdge(person, mentor);//mentor : 1 ; person : 2
            boolean good = Math.random() > 0.5;
            
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            if (isFriendOfMentee && !isFriendOfMentor) { //the person is mentee's friend but not mentor friend
                System.out.println("Mentee " + mentee + " is chit-chatting with his friend " + person);
                System.out.println("Chit-chatting now...\n");
                if (good) {
                    rep *= 0.5;
                    System.out.println(mentee + " and " + person + " are talking about " + mentor + "'s good side");
                } else {
                    rep *= -1;
                    System.out.println(mentee + " and " + person + " are talking about " + mentor + "'s bad side");
                }
                graph.addDirectedEdge(mentor, person, rep);
                System.out.println(mentor + "'s rep points relative to " + person + " is " + rep);
                System.out.println("----------------------------------------------------\n");
                graph.printEdges();
                return true;
            }
            else if(isFriendOfMentee && isFriendOfMentor){ //the person is mentee's friend and also mentor friend
                System.out.println("Mentee " + mentee + " is chit-chatting with his friend " + person);
                System.out.println("The mentee's friend is friend of mentor");
                System.out.println("Chit-chatting now...\n");
                double points = graph.getVertexRep(mentor, person);
                if (good){
                    rep = (rep*0.5) + points;
                    System.out.println(mentee + " and " + person + " are talking about " + mentor + "'s good side");
                } else {
                    rep = (rep*-1) + points;
                    System.out.println(mentee + " and " + person + " are talking about " + mentor + "'s bad side");
                }
                graph.addRepPoints(mentor, person, rep);
                System.out.println(mentor + "'s rep points relative to " + person + " is " + rep);
                System.out.println("----------------------------------------------------\n");
                graph.printEdges();
                return true;
            }
            else{
                System.out.println(mentee + " and " + person + " are strangers. Unable to chit-chat.");
                return false;
            }
        }
        else{
            System.out.println("Sorry! Mentee cannot chit-chat with mentor or himself");
            return false;
        }
    }
    
    public static Socialgraph addToGraph(){
        Socialgraph graph = new Socialgraph();
        String[] students = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
        for(String student : students){
            graph.addVertex(student);
        }
        //srcName, destName, srcRep, destRep
        graph.addUndirectedEdge("1", "7", 3.0, 4.0);
        graph.addUndirectedEdge("1", "2", 8.0, 5.0);
        graph.addUndirectedEdge("2", "3", 4.0, 5.0);
        graph.addUndirectedEdge("2", "5", 2.0, 6.0);
        graph.addUndirectedEdge("2", "6", 7.0, 9.0);
        graph.addUndirectedEdge("4", "8", 10.0, 7.0);
        graph.addUndirectedEdge("4", "10", 7.0, 7.0);
        graph.addUndirectedEdge("9", "10", 6.0, 5.0);
        
        System.out.print("# List of all students : [");
        ArrayList<String> studentsList = graph.getAllStudents();
        for(int i=0; i<studentsList.size()-1; i++){
            System.out.print(studentsList.get(i) + ", ");
        }
        System.out.println(studentsList.get(studentsList.size()-1) + "]");
        System.out.println("");
        return graph;
    }
}
